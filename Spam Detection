{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9255825,"sourceType":"datasetVersion","datasetId":5599950}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-27T11:22:29.850179Z","iopub.execute_input":"2024-08-27T11:22:29.850600Z","iopub.status.idle":"2024-08-27T11:22:30.316335Z","shell.execute_reply.started":"2024-08-27T11:22:29.850558Z","shell.execute_reply":"2024-08-27T11:22:30.315194Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/spam-dataset/V2X_Data.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install torch torch-geometric scikit-learn pandas tqdm\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T11:22:33.817607Z","iopub.execute_input":"2024-08-27T11:22:33.818446Z","iopub.status.idle":"2024-08-27T11:22:52.921558Z","shell.execute_reply.started":"2024-08-27T11:22:33.818378Z","shell.execute_reply":"2024-08-27T11:22:52.920131Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"Requirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.4.0+cpu)\nCollecting torch-geometric\n  Downloading torch_geometric-2.5.3-py3-none-any.whl.metadata (64 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m64.2/64.2 kB\u001b[0m \u001b[31m710.7 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (1.2.2)\nRequirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (2.2.2)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (4.66.4)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from torch) (3.15.1)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.12)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.6.1)\nRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (1.26.4)\nRequirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (1.14.0)\nRequirement already satisfied: aiohttp in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (3.9.5)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (2.32.3)\nRequirement already satisfied: pyparsing in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (3.1.2)\nRequirement already satisfied: psutil>=5.8.0 in /opt/conda/lib/python3.10/site-packages (from torch-geometric) (5.9.3)\nRequirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.4.2)\nRequirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (3.5.0)\nRequirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)\nRequirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)\nRequirement already satisfied: six>=1.5 in /opt/conda/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\nRequirement already satisfied: aiosignal>=1.1.2 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (1.3.1)\nRequirement already satisfied: attrs>=17.3.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (23.2.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (1.4.1)\nRequirement already satisfied: multidict<7.0,>=4.5 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (6.0.5)\nRequirement already satisfied: yarl<2.0,>=1.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (1.9.4)\nRequirement already satisfied: async-timeout<5.0,>=4.0 in /opt/conda/lib/python3.10/site-packages (from aiohttp->torch-geometric) (4.0.3)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->torch-geometric) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->torch-geometric) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->torch-geometric) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->torch-geometric) (2024.7.4)\nRequirement already satisfied: mpmath>=0.19 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\nDownloading torch_geometric-2.5.3-py3-none-any.whl (1.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hInstalling collected packages: torch-geometric\nSuccessfully installed torch-geometric-2.5.3\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\nimport torch\nimport torch.nn.functional as F\nfrom torch_geometric.data import Data, Dataset\nfrom torch_geometric.loader import DataLoader\nfrom torch_geometric.nn import GCNConv\nfrom transformers import BertTokenizer, BertModel\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder","metadata":{"execution":{"iopub.status.busy":"2024-08-27T11:22:52.923866Z","iopub.execute_input":"2024-08-27T11:22:52.924301Z","iopub.status.idle":"2024-08-27T11:23:02.257219Z","shell.execute_reply.started":"2024-08-27T11:22:52.924255Z","shell.execute_reply":"2024-08-27T11:23:02.255950Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"df=pd.read_csv('/kaggle/input/spam-dataset/V2X_Data.csv')\ndf","metadata":{"execution":{"iopub.status.busy":"2024-08-27T11:23:02.258598Z","iopub.execute_input":"2024-08-27T11:23:02.259259Z","iopub.status.idle":"2024-08-27T11:23:02.309091Z","shell.execute_reply.started":"2024-08-27T11:23:02.259213Z","shell.execute_reply":"2024-08-27T11:23:02.307746Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"     Message ID Source Vehicle Destination Vehicle Message Type  \\\n0             1          Car A               Car B    Emergency   \n1             2          Car C               Car D     Roadwork   \n2             3          Car E        All Vehicles      Weather   \n3             4          Car F               Car G      Traffic   \n4             5          Car H        All Vehicles    Emergency   \n..          ...            ...                 ...          ...   \n933        1008          Car Y        All Vehicles      Weather   \n934        1009          Car Z               Car A       Hazard   \n935        1010          Car B        All Vehicles     Roadwork   \n936        1011          Car C               Car D         Spam   \n937        1012          Car E        All Vehicles      Traffic   \n\n                                       Message Content Priority Spam  \n0                          Accident ahead, use caution     High   No  \n1                              Right lane closed ahead   Medium   No  \n2                                  Heavy rain expected      Low   No  \n3                                   Slow traffic ahead   Medium   No  \n4                         Vehicle stalled in left lane     High   No  \n..                                                 ...      ...  ...  \n933                        Severe thunderstorm warning     High   No  \n934             Slippery road conditions, reduce speed   Medium   No  \n935             Lane closures due to construction work   Medium   No  \n936  Limited-time offer - Buy now and get a free gift!      Low  Yes  \n937              Heavy traffic reported on Highway 123     High   No  \n\n[938 rows x 7 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Message ID</th>\n      <th>Source Vehicle</th>\n      <th>Destination Vehicle</th>\n      <th>Message Type</th>\n      <th>Message Content</th>\n      <th>Priority</th>\n      <th>Spam</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Car A</td>\n      <td>Car B</td>\n      <td>Emergency</td>\n      <td>Accident ahead, use caution</td>\n      <td>High</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Car C</td>\n      <td>Car D</td>\n      <td>Roadwork</td>\n      <td>Right lane closed ahead</td>\n      <td>Medium</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Car E</td>\n      <td>All Vehicles</td>\n      <td>Weather</td>\n      <td>Heavy rain expected</td>\n      <td>Low</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Car F</td>\n      <td>Car G</td>\n      <td>Traffic</td>\n      <td>Slow traffic ahead</td>\n      <td>Medium</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Car H</td>\n      <td>All Vehicles</td>\n      <td>Emergency</td>\n      <td>Vehicle stalled in left lane</td>\n      <td>High</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>933</th>\n      <td>1008</td>\n      <td>Car Y</td>\n      <td>All Vehicles</td>\n      <td>Weather</td>\n      <td>Severe thunderstorm warning</td>\n      <td>High</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>934</th>\n      <td>1009</td>\n      <td>Car Z</td>\n      <td>Car A</td>\n      <td>Hazard</td>\n      <td>Slippery road conditions, reduce speed</td>\n      <td>Medium</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>935</th>\n      <td>1010</td>\n      <td>Car B</td>\n      <td>All Vehicles</td>\n      <td>Roadwork</td>\n      <td>Lane closures due to construction work</td>\n      <td>Medium</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>936</th>\n      <td>1011</td>\n      <td>Car C</td>\n      <td>Car D</td>\n      <td>Spam</td>\n      <td>Limited-time offer - Buy now and get a free gift!</td>\n      <td>Low</td>\n      <td>Yes</td>\n    </tr>\n    <tr>\n      <th>937</th>\n      <td>1012</td>\n      <td>Car E</td>\n      <td>All Vehicles</td>\n      <td>Traffic</td>\n      <td>Heavy traffic reported on Highway 123</td>\n      <td>High</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n<p>938 rows × 7 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"\n","metadata":{}},{"cell_type":"code","source":"# Encode categorical variables\nle_source = LabelEncoder()\nle_dest = LabelEncoder()\nle_msg_type = LabelEncoder()\nle_priority = LabelEncoder()\nle_spam = LabelEncoder()\n\ndf['Source_encoded'] = le_source.fit_transform(df['Source Vehicle'])\ndf['Dest_encoded'] = le_dest.fit_transform(df['Destination Vehicle'])\ndf['MsgType_encoded'] = le_msg_type.fit_transform(df['Message Type'])\ndf['Priority_encoded'] = le_priority.fit_transform(df['Priority'])\ndf['Spam_encoded'] = le_spam.fit_transform(df['Spam'])\n\n# Step 2: Prepare BERT tokenizer and model\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nbert_model = BertModel.from_pretrained('bert-base-uncased')","metadata":{"execution":{"iopub.status.busy":"2024-08-27T11:23:02.311225Z","iopub.execute_input":"2024-08-27T11:23:02.311599Z","iopub.status.idle":"2024-08-27T11:23:06.274515Z","shell.execute_reply.started":"2024-08-27T11:23:02.311559Z","shell.execute_reply":"2024-08-27T11:23:06.273284Z"},"trusted":true},"execution_count":5,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"105f176b624641a1bebdd50c31b74308"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6a754e384fee47f291b5bef84051eabc"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"39c7d8c755f2491b86db8c0589125846"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"04317721d5a14585b2fb563c62eba852"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5b156040967a480887bf005138a00f9e"}},"metadata":{}},{"name":"stderr","text":"A parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\n","output_type":"stream"}]},{"cell_type":"code","source":"from torch_geometric.data import Dataset, Data\n\nclass CarNetworkDataset(Dataset):\n    def __init__(self, df, tokenizer, bert_model):\n        self.df = df\n        self.tokenizer = tokenizer\n        self.bert_model = bert_model\n\n    def __len__(self):\n        return len(self.df)\n    \n    def __getitem__(self, idx):\n        if idx >= len(self.df):\n            raise IndexError(f\"Index {idx} out of range\")\n        row = self.df.iloc[idx]\n        \n        # Edge index for graph data\n        edge_index = torch.tensor([[row['Source_encoded']], [row['Dest_encoded']]], dtype=torch.long)\n        \n        # Graph features\n        x_graph = torch.tensor([row['MsgType_encoded'], row['Priority_encoded']], dtype=torch.float).unsqueeze(0)\n        \n        # Process text data with BERT\n        encoded_input = self.tokenizer(row['Message Content'], padding=True, truncation=True, return_tensors='pt')\n        with torch.no_grad():\n            bert_output = self.bert_model(**encoded_input)\n        text_features = bert_output.last_hidden_state[:, 0, :]  # Use [CLS] token representation\n        \n        # Debugging print statements\n        print(f\"x_graph shape: {x_graph.shape}\")\n        print(f\"text_features shape: {text_features.shape}\")\n        \n        # Ensure x_graph and text_features are aligned\n        if x_graph.shape[0] != text_features.shape[0]:\n            print(f\"Expanding x_graph from shape {x_graph.shape} to {text_features.shape[0]}\")\n            x_graph = x_graph.expand(text_features.shape[0], -1)\n        \n        # Combine graph features and text features\n        x = torch.cat([x_graph, text_features], dim=1)\n        \n        # Target label\n        y = torch.tensor([row['Spam_encoded']], dtype=torch.long)\n        \n        return Data(x=x, edge_index=edge_index, y=y)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T12:31:58.160310Z","iopub.execute_input":"2024-08-27T12:31:58.160785Z","iopub.status.idle":"2024-08-27T12:31:58.174733Z","shell.execute_reply.started":"2024-08-27T12:31:58.160741Z","shell.execute_reply":"2024-08-27T12:31:58.173413Z"},"trusted":true},"execution_count":86,"outputs":[]},{"cell_type":"code","source":"\n# Create dataset\ndataset = CarNetworkDataset(df, tokenizer, bert_model)\n\n# Step 4: Split the dataset\ntrain_dataset, test_dataset = train_test_split(dataset, test_size=0.2, random_state=42)\n\n# Create DataLoaders\ntrain_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\ntest_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-27T12:32:02.149487Z","iopub.execute_input":"2024-08-27T12:32:02.149916Z","iopub.status.idle":"2024-08-27T12:32:52.999950Z","shell.execute_reply.started":"2024-08-27T12:32:02.149876Z","shell.execute_reply":"2024-08-27T12:32:52.998698Z"},"trusted":true},"execution_count":87,"outputs":[{"name":"stdout","text":"x_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\nx_graph shape: torch.Size([1, 2])\ntext_features shape: torch.Size([1, 768])\n","output_type":"stream"}]},{"cell_type":"code","source":"\nclass GCNModel(torch.nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim):\n        super(GCNModel, self).__init__()\n        self.conv1 = GCNConv(input_dim, hidden_dim)\n        self.conv2 = GCNConv(hidden_dim, hidden_dim)\n        self.fc = torch.nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x, edge_index):\n        x = F.relu(self.conv1(x, edge_index))\n        x = F.relu(self.conv2(x, edge_index))\n        x = self.fc(x)\n        return F.log_softmax(x, dim=1)\n\n# Step 6: Initialize the model and optimizer\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel = GCNModel(input_dim=dataset[0].x.size(1), hidden_dim=64, output_dim=2).to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)","metadata":{"execution":{"iopub.status.busy":"2024-08-27T12:30:24.107224Z","iopub.execute_input":"2024-08-27T12:30:24.108522Z","iopub.status.idle":"2024-08-27T12:30:24.193372Z","shell.execute_reply.started":"2024-08-27T12:30:24.108456Z","shell.execute_reply":"2024-08-27T12:30:24.192089Z"},"trusted":true},"execution_count":83,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-08-27T12:17:36.131158Z","iopub.execute_input":"2024-08-27T12:17:36.131590Z","iopub.status.idle":"2024-08-27T12:17:36.141560Z","shell.execute_reply.started":"2024-08-27T12:17:36.131547Z","shell.execute_reply":"2024-08-27T12:17:36.140080Z"},"trusted":true},"execution_count":68,"outputs":[{"name":"stdout","text":"DataBatch(x=[1, 770], edge_index=[2, 1], y=[1], batch=[1], ptr=[2])\ntensor([[2],\n        [0]])\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\nimport torch.nn.functional as F\n\ndef train():\n    model.train()\n    total_loss = 0\n    for data in train_loader:\n        data = data.to(device)\n        optimizer.zero_grad()\n        out = model(data.x, data.edge_index)\n        loss = F.nll_loss(out, data.y)\n        loss.backward()\n        optimizer.step()\n        total_loss += loss.item()\n    return total_loss / len(train_loader)\n\ndef evaluate(loader):\n    model.eval()\n    all_preds = []\n    all_labels = []\n    with torch.no_grad():\n        for data in loader:\n            data = data.to(device)\n            out = model(data.x, data.edge_index)\n            pred = out.argmax(dim=1)\n            all_preds.append(pred.cpu().numpy())\n            all_labels.append(data.y.cpu().numpy())\n\n    # Flatten the lists\n    all_preds = np.concatenate(all_preds)\n    all_labels = np.concatenate(all_labels)\n\n    accuracy = accuracy_score(all_labels, all_preds)\n    precision = precision_score(all_labels, all_preds, average='binary')\n    recall = recall_score(all_labels, all_preds, average='binary')\n    f1 = f1_score(all_labels, all_preds, average='binary')\n    cm = confusion_matrix(all_labels, all_preds)\n\n    return accuracy, precision, recall, f1, cm\n\ntrain_acc, train_precision, train_recall, train_f1, train_cm = evaluate(train_loader)\ntest_acc, test_precision, test_recall, test_f1, test_cm = evaluate(test_loader)\n\nprint(f'Train Accuracy: {train_acc:.4f}, Test Accuracy: {test_acc:.4f}')\nprint(f'Train Precision: {train_precision:.4f}, Recall: {train_recall:.4f}, F1: {train_f1:.4f}')\nprint(f'Test Precision: {test_precision:.4f}, Recall: {test_recall:.4f}, F1: {test_f1:.4f}')\nprint(f'Train Confusion Matrix:\\n{train_cm}')\nprint(f'Test Confusion Matrix:\\n{test_cm}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T12:33:03.768935Z","iopub.execute_input":"2024-08-27T12:33:03.770743Z","iopub.status.idle":"2024-08-27T12:33:04.122489Z","shell.execute_reply.started":"2024-08-27T12:33:03.770650Z","shell.execute_reply":"2024-08-27T12:33:04.119989Z"},"trusted":true},"execution_count":88,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","Cell \u001b[0;32mIn[88], line 41\u001b[0m\n\u001b[1;32m     37\u001b[0m     cm \u001b[38;5;241m=\u001b[39m confusion_matrix(all_labels, all_preds)\n\u001b[1;32m     39\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m accuracy, precision, recall, f1, cm\n\u001b[0;32m---> 41\u001b[0m train_acc, train_precision, train_recall, train_f1, train_cm \u001b[38;5;241m=\u001b[39m \u001b[43mevaluate\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_loader\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     42\u001b[0m test_acc, test_precision, test_recall, test_f1, test_cm \u001b[38;5;241m=\u001b[39m evaluate(test_loader)\n\u001b[1;32m     44\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTrain Accuracy: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtrain_acc\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.4f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, Test Accuracy: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtest_acc\u001b[38;5;132;01m:\u001b[39;00m\u001b[38;5;124m.4f\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m'\u001b[39m)\n","Cell \u001b[0;32mIn[88], line 24\u001b[0m, in \u001b[0;36mevaluate\u001b[0;34m(loader)\u001b[0m\n\u001b[1;32m     22\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m data \u001b[38;5;129;01min\u001b[39;00m loader:\n\u001b[1;32m     23\u001b[0m     data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[0;32m---> 24\u001b[0m     out \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43medge_index\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     25\u001b[0m     pred \u001b[38;5;241m=\u001b[39m out\u001b[38;5;241m.\u001b[39margmax(dim\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m     26\u001b[0m     all_preds\u001b[38;5;241m.\u001b[39mappend(pred\u001b[38;5;241m.\u001b[39mcpu()\u001b[38;5;241m.\u001b[39mnumpy())\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","Cell \u001b[0;32mIn[83], line 9\u001b[0m, in \u001b[0;36mGCNModel.forward\u001b[0;34m(self, x, edge_index)\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, x, edge_index):\n\u001b[0;32m----> 9\u001b[0m     x \u001b[38;5;241m=\u001b[39m F\u001b[38;5;241m.\u001b[39mrelu(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconv1\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43medge_index\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m     10\u001b[0m     x \u001b[38;5;241m=\u001b[39m F\u001b[38;5;241m.\u001b[39mrelu(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconv2(x, edge_index))\n\u001b[1;32m     11\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfc(x)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/nn/conv/gcn_conv.py:241\u001b[0m, in \u001b[0;36mGCNConv.forward\u001b[0;34m(self, x, edge_index, edge_weight)\u001b[0m\n\u001b[1;32m    239\u001b[0m cache \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cached_edge_index\n\u001b[1;32m    240\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cache \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 241\u001b[0m     edge_index, edge_weight \u001b[38;5;241m=\u001b[39m \u001b[43mgcn_norm\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# yapf: disable\u001b[39;49;00m\n\u001b[1;32m    242\u001b[0m \u001b[43m        \u001b[49m\u001b[43medge_index\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43medge_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msize\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnode_dim\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    243\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimproved\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43madd_self_loops\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mflow\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    244\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcached:\n\u001b[1;32m    245\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cached_edge_index \u001b[38;5;241m=\u001b[39m (edge_index, edge_weight)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/nn/conv/gcn_conv.py:108\u001b[0m, in \u001b[0;36mgcn_norm\u001b[0;34m(edge_index, edge_weight, num_nodes, improved, add_self_loops, flow, dtype)\u001b[0m\n\u001b[1;32m    106\u001b[0m row, col \u001b[38;5;241m=\u001b[39m edge_index[\u001b[38;5;241m0\u001b[39m], edge_index[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m    107\u001b[0m idx \u001b[38;5;241m=\u001b[39m col \u001b[38;5;28;01mif\u001b[39;00m flow \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msource_to_target\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m row\n\u001b[0;32m--> 108\u001b[0m deg \u001b[38;5;241m=\u001b[39m \u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\u001b[43medge_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43midx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdim_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnum_nodes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduce\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msum\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    109\u001b[0m deg_inv_sqrt \u001b[38;5;241m=\u001b[39m deg\u001b[38;5;241m.\u001b[39mpow_(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.5\u001b[39m)\n\u001b[1;32m    110\u001b[0m deg_inv_sqrt\u001b[38;5;241m.\u001b[39mmasked_fill_(deg_inv_sqrt \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mfloat\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124minf\u001b[39m\u001b[38;5;124m'\u001b[39m), \u001b[38;5;241m0\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/utils/_scatter.py:75\u001b[0m, in \u001b[0;36mscatter\u001b[0;34m(src, index, dim, dim_size, reduce)\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m reduce \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msum\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m reduce \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124madd\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m     74\u001b[0m     index \u001b[38;5;241m=\u001b[39m broadcast(index, src, dim)\n\u001b[0;32m---> 75\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msrc\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnew_zeros\u001b[49m\u001b[43m(\u001b[49m\u001b[43msize\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter_add_\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdim\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msrc\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     77\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m reduce \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m     78\u001b[0m     count \u001b[38;5;241m=\u001b[39m src\u001b[38;5;241m.\u001b[39mnew_zeros(dim_size)\n","\u001b[0;31mRuntimeError\u001b[0m: index 33 is out of bounds for dimension 0 with size 32"],"ename":"RuntimeError","evalue":"index 33 is out of bounds for dimension 0 with size 32","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Step 9: Run the training\nfor epoch in range(200):\n    loss = train()\n    train_acc = test(train_loader)\n    test_acc = test(test_loader)\n    print(f'Epoch: {epoch:03d}, Loss: {loss:.4f}, Train Acc: {train_acc:.4f}, Test Acc: {test_acc:.4f}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T12:30:30.397258Z","iopub.execute_input":"2024-08-27T12:30:30.397696Z","iopub.status.idle":"2024-08-27T12:30:30.672966Z","shell.execute_reply.started":"2024-08-27T12:30:30.397653Z","shell.execute_reply":"2024-08-27T12:30:30.671376Z"},"trusted":true},"execution_count":85,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","Cell \u001b[0;32mIn[85], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m#Step 9: Run the training\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m epoch \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m200\u001b[39m):\n\u001b[0;32m----> 3\u001b[0m     loss \u001b[38;5;241m=\u001b[39m \u001b[43mtrain\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      4\u001b[0m     train_acc \u001b[38;5;241m=\u001b[39m test(train_loader)\n\u001b[1;32m      5\u001b[0m     test_acc \u001b[38;5;241m=\u001b[39m test(test_loader)\n","Cell \u001b[0;32mIn[84], line 8\u001b[0m, in \u001b[0;36mtrain\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m data \u001b[38;5;241m=\u001b[39m data\u001b[38;5;241m.\u001b[39mto(device)\n\u001b[1;32m      7\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n\u001b[0;32m----> 8\u001b[0m out \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdata\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43medge_index\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      9\u001b[0m loss \u001b[38;5;241m=\u001b[39m F\u001b[38;5;241m.\u001b[39mnll_loss(out, data\u001b[38;5;241m.\u001b[39my)\n\u001b[1;32m     10\u001b[0m loss\u001b[38;5;241m.\u001b[39mbackward()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","Cell \u001b[0;32mIn[83], line 9\u001b[0m, in \u001b[0;36mGCNModel.forward\u001b[0;34m(self, x, edge_index)\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, x, edge_index):\n\u001b[0;32m----> 9\u001b[0m     x \u001b[38;5;241m=\u001b[39m F\u001b[38;5;241m.\u001b[39mrelu(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconv1\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43medge_index\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m     10\u001b[0m     x \u001b[38;5;241m=\u001b[39m F\u001b[38;5;241m.\u001b[39mrelu(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconv2(x, edge_index))\n\u001b[1;32m     11\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfc(x)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1553\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1551\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[1;32m   1552\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m-> 1553\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_call_impl\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/nn/modules/module.py:1562\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1557\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1558\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1559\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1560\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1561\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1562\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mforward_call\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1564\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m   1565\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/nn/conv/gcn_conv.py:241\u001b[0m, in \u001b[0;36mGCNConv.forward\u001b[0;34m(self, x, edge_index, edge_weight)\u001b[0m\n\u001b[1;32m    239\u001b[0m cache \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cached_edge_index\n\u001b[1;32m    240\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m cache \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m--> 241\u001b[0m     edge_index, edge_weight \u001b[38;5;241m=\u001b[39m \u001b[43mgcn_norm\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# yapf: disable\u001b[39;49;00m\n\u001b[1;32m    242\u001b[0m \u001b[43m        \u001b[49m\u001b[43medge_index\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43medge_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msize\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnode_dim\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    243\u001b[0m \u001b[43m        \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mimproved\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43madd_self_loops\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mflow\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mx\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    244\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcached:\n\u001b[1;32m    245\u001b[0m         \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_cached_edge_index \u001b[38;5;241m=\u001b[39m (edge_index, edge_weight)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/nn/conv/gcn_conv.py:108\u001b[0m, in \u001b[0;36mgcn_norm\u001b[0;34m(edge_index, edge_weight, num_nodes, improved, add_self_loops, flow, dtype)\u001b[0m\n\u001b[1;32m    106\u001b[0m row, col \u001b[38;5;241m=\u001b[39m edge_index[\u001b[38;5;241m0\u001b[39m], edge_index[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m    107\u001b[0m idx \u001b[38;5;241m=\u001b[39m col \u001b[38;5;28;01mif\u001b[39;00m flow \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msource_to_target\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01melse\u001b[39;00m row\n\u001b[0;32m--> 108\u001b[0m deg \u001b[38;5;241m=\u001b[39m \u001b[43mscatter\u001b[49m\u001b[43m(\u001b[49m\u001b[43medge_weight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43midx\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdim_size\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mnum_nodes\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduce\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43msum\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m    109\u001b[0m deg_inv_sqrt \u001b[38;5;241m=\u001b[39m deg\u001b[38;5;241m.\u001b[39mpow_(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m0.5\u001b[39m)\n\u001b[1;32m    110\u001b[0m deg_inv_sqrt\u001b[38;5;241m.\u001b[39mmasked_fill_(deg_inv_sqrt \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mfloat\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124minf\u001b[39m\u001b[38;5;124m'\u001b[39m), \u001b[38;5;241m0\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch_geometric/utils/_scatter.py:75\u001b[0m, in \u001b[0;36mscatter\u001b[0;34m(src, index, dim, dim_size, reduce)\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m reduce \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msum\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;129;01mor\u001b[39;00m reduce \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124madd\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m     74\u001b[0m     index \u001b[38;5;241m=\u001b[39m broadcast(index, src, dim)\n\u001b[0;32m---> 75\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43msrc\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mnew_zeros\u001b[49m\u001b[43m(\u001b[49m\u001b[43msize\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mscatter_add_\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdim\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindex\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msrc\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     77\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m reduce \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[1;32m     78\u001b[0m     count \u001b[38;5;241m=\u001b[39m src\u001b[38;5;241m.\u001b[39mnew_zeros(dim_size)\n","\u001b[0;31mRuntimeError\u001b[0m: index 33 is out of bounds for dimension 0 with size 32"],"ename":"RuntimeError","evalue":"index 33 is out of bounds for dimension 0 with size 32","output_type":"error"}]},{"cell_type":"code","source":"print(f\"x shape: {x.shape}\")\nprint(f\"text_features shape: {text_features.shape}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T11:34:41.074442Z","iopub.execute_input":"2024-08-27T11:34:41.074902Z","iopub.status.idle":"2024-08-27T11:34:41.119362Z","shell.execute_reply.started":"2024-08-27T11:34:41.074859Z","shell.execute_reply":"2024-08-27T11:34:41.117749Z"},"trusted":true},"execution_count":28,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","Cell \u001b[0;32mIn[28], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mx shape: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[43mx\u001b[49m\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtext_features shape: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mtext_features\u001b[38;5;241m.\u001b[39mshape\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mNameError\u001b[0m: name 'x' is not defined"],"ename":"NameError","evalue":"name 'x' is not defined","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def test(loader):\n    model.eval()\n    all_preds = []\n    all_labels = []\n    with torch.no_grad():\n        for data in loader:\n            data = data.to(device)\n            out = model(data.x, data.edge_index)\n            pred = out.argmax(dim=1)\n            all_preds.extend(pred.cpu().numpy())\n            all_labels.extend(data.y.cpu().numpy())\n    return np.array(all_preds), np.array(all_labels)","metadata":{"execution":{"iopub.status.busy":"2024-08-27T05:47:55.591778Z","iopub.execute_input":"2024-08-27T05:47:55.592667Z","iopub.status.idle":"2024-08-27T05:47:55.638995Z","shell.execute_reply.started":"2024-08-27T05:47:55.592604Z","shell.execute_reply":"2024-08-27T05:47:55.637852Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch_geometric/deprecation.py:26: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead\n  warnings.warn(out)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Step 10: Final evaluation and metrics\nfinal_preds, final_labels = test(test_loader)\nfinal_acc = (final_preds == final_labels).mean()\nprint(f'Final Test Accuracy: {final_acc:.4f}')\n\n# Calculate precision, recall, and F1 score\nprecision, recall, f1, _ = precision_recall_fscore_support(final_labels, final_preds, average='binary')\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')\n\n# Create confusion matrix\ncm = confusion_matrix(final_labels, final_preds)\n\n# Visualize confusion matrix\nplt.figure(figsize=(10,7))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix')\nplt.ylabel('True Label')\nplt.xlabel('Predicted Label')\nplt.show()\n\n# Visualize precision, recall, and F1 score\nmetrics = ['Precision', 'Recall', 'F1 Score']\nvalues = [precision, recall, f1]\n\nplt.figure(figsize=(10,7))\nsns.barplot(x=metrics, y=values)\nplt.title('Precision, Recall, and F1 Score')\nplt.ylim(0, 1)\nfor i, v in enumerate(values):\n    plt.text(i, v, f'{v:.2f}', ha='center', va='bottom')\nplt.show()\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-08-27T05:47:55.640320Z","iopub.execute_input":"2024-08-27T05:47:55.640715Z","iopub.status.idle":"2024-08-27T05:47:55.657000Z","shell.execute_reply.started":"2024-08-27T05:47:55.640674Z","shell.execute_reply":"2024-08-27T05:47:55.655676Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"","metadata":{"execution":{"iopub.status.busy":"2024-08-27T05:49:28.738901Z","iopub.execute_input":"2024-08-27T05:49:28.739357Z","iopub.status.idle":"2024-08-27T05:50:32.848448Z","shell.execute_reply.started":"2024-08-27T05:49:28.739314Z","shell.execute_reply":"2024-08-27T05:50:32.847105Z"},"trusted":true},"execution_count":43,"outputs":[{"name":"stdout","text":"Epoch 100, Loss: 0.5556\nEpoch 200, Loss: 0.5556\nEpoch 300, Loss: 0.5556\nEpoch 400, Loss: 0.5556\nEpoch 500, Loss: 0.5556\nEpoch 600, Loss: 0.5556\nEpoch 700, Loss: 0.5556\nEpoch 800, Loss: 0.5556\nEpoch 900, Loss: 0.5556\nEpoch 1000, Loss: 0.5556\n","output_type":"stream"}]},{"cell_type":"code","source":"\n# Step 1: Load and preprocess the data\ndf = pd.read_csv('/kaggle/input/spam-dataset/V2X_Data.csv')\n\n# Encode categorical variables\nle_source = LabelEncoder()\nle_dest = LabelEncoder()\nle_msg_type = LabelEncoder()\nle_priority = LabelEncoder()\nle_spam = LabelEncoder()\n\ndf['Source_encoded'] = le_source.fit_transform(df['Source Vehicle'])\ndf['Dest_encoded'] = le_dest.fit_transform(df['Destination Vehicle'])\ndf['MsgType_encoded'] = le_msg_type.fit_transform(df['Message Type'])\ndf['Priority_encoded'] = le_priority.fit_transform(df['Priority'])\ndf['Spam_encoded'] = le_spam.fit_transform(df['Spam'])\n\n# Step 2: Prepare BERT tokenizer and model\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nbert_model = BertModel.from_pretrained('bert-base-uncased')\n\n# Step 3: Create graph data\nedge_index = torch.tensor([df['Source_encoded'].tolist(), df['Dest_encoded'].tolist()], dtype=torch.long)\nx = torch.tensor(df[['MsgType_encoded', 'Priority_encoded']].values, dtype=torch.float)\n\n# Process text data with BERT\nencoded_input = tokenizer(df['Message Content'].tolist(), padding=True, truncation=True, return_tensors='pt')\nwith torch.no_grad():\n    bert_output = bert_model(**encoded_input)\ntext_features = bert_output.last_hidden_state[:, 0, :]  # Use [CLS] token representation\n\n# Combine graph features and text features\nx = torch.cat([x, text_features], dim=1)\n\ny = torch.tensor(df['Spam_encoded'].values, dtype=torch.long)\n\n# Create PyTorch Geometric Data object\ndata = Data(x=x, edge_index=edge_index, y=y)","metadata":{"execution":{"iopub.status.busy":"2024-08-27T06:11:38.866131Z","iopub.execute_input":"2024-08-27T06:11:38.866563Z","iopub.status.idle":"2024-08-27T06:12:08.320222Z","shell.execute_reply.started":"2024-08-27T06:11:38.866523Z","shell.execute_reply":"2024-08-27T06:12:08.319184Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\n","output_type":"stream"}]},{"cell_type":"code","source":"\n\n# Step 4: Define the Graph CNN model\nclass GCNModel(torch.nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim):\n        super(GCNModel, self).__init__()\n        self.conv1 = GCNConv(input_dim, hidden_dim)\n        self.conv2 = GCNConv(hidden_dim, hidden_dim)\n        self.fc = torch.nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x, edge_index):\n        x = F.relu(self.conv1(x, edge_index))\n        x = F.relu(self.conv2(x, edge_index))\n        x = self.fc(x)\n        return F.log_softmax(x, dim=1)\n\n# Step 5: Train-test split\ntrain_mask = torch.zeros(data.num_nodes, dtype=torch.bool)\ntest_mask = torch.zeros(data.num_nodes, dtype=torch.bool)\ntrain_indices, test_indices = train_test_split(range(data.num_nodes), test_size=0.2, random_state=42)\ntrain_mask[train_indices] = True\ntest_mask[test_indices] = True\n\ndata.train_mask = train_mask\ndata.test_mask = test_mask\n\n# Step 6: Initialize the model and optimizer\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel = GCNModel(input_dim=x.size(1), hidden_dim=64, output_dim=2).to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\ndata = data.to(device)\n\n# Step 7: Training loop\ndef train():\n    model.train()\n    optimizer.zero_grad()\n    out = model(data.x, data.edge_index)\n    loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask])\n    loss.backward()\n    optimizer.step()\n    return loss.item()\n\n# Step 8: Testing\ndef test():\n    model.eval()\n    with torch.no_grad():\n        out = model(data.x, data.edge_index)\n        pred = out.argmax(dim=1)\n        correct = pred[data.test_mask] == data.y[data.test_mask]\n        acc = int(correct.sum()) / int(data.test_mask.sum())\n    return acc\n\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T06:18:47.744431Z","iopub.execute_input":"2024-08-27T06:18:47.744925Z","iopub.status.idle":"2024-08-27T06:18:47.772218Z","shell.execute_reply.started":"2024-08-27T06:18:47.744879Z","shell.execute_reply":"2024-08-27T06:18:47.770605Z"},"trusted":true},"execution_count":56,"outputs":[]},{"cell_type":"code","source":"# Step 9: Run the training\nfor epoch in range(200):\n    loss = train()\n    if epoch % 10 == 0:\n        acc = test()\n        print(f'Epoch: {epoch:03d}, Loss: {loss:.4f}, Test Acc: {acc:.4f}')\n\n# Step 10: Final evaluation\nfinal_acc = test()\nprint(f'Final Test Accuracy: {final_acc:.4f}')\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T06:18:54.736222Z","iopub.execute_input":"2024-08-27T06:18:54.736699Z","iopub.status.idle":"2024-08-27T06:18:56.631393Z","shell.execute_reply.started":"2024-08-27T06:18:54.736656Z","shell.execute_reply":"2024-08-27T06:18:56.630147Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"Epoch: 000, Loss: 0.7318, Test Acc: 0.7128\nEpoch: 010, Loss: 0.0724, Test Acc: 1.0000\nEpoch: 020, Loss: 0.0379, Test Acc: 0.9947\nEpoch: 030, Loss: 0.0276, Test Acc: 0.9947\nEpoch: 040, Loss: 0.0182, Test Acc: 1.0000\nEpoch: 050, Loss: 0.0086, Test Acc: 1.0000\nEpoch: 060, Loss: 0.0031, Test Acc: 1.0000\nEpoch: 070, Loss: 0.0011, Test Acc: 1.0000\nEpoch: 080, Loss: 0.0004, Test Acc: 1.0000\nEpoch: 090, Loss: 0.0002, Test Acc: 1.0000\nEpoch: 100, Loss: 0.0001, Test Acc: 1.0000\nEpoch: 110, Loss: 0.0001, Test Acc: 1.0000\nEpoch: 120, Loss: 0.0001, Test Acc: 1.0000\nEpoch: 130, Loss: 0.0001, Test Acc: 1.0000\nEpoch: 140, Loss: 0.0001, Test Acc: 1.0000\nEpoch: 150, Loss: 0.0001, Test Acc: 1.0000\nEpoch: 160, Loss: 0.0000, Test Acc: 1.0000\nEpoch: 170, Loss: 0.0000, Test Acc: 1.0000\nEpoch: 180, Loss: 0.0000, Test Acc: 1.0000\nEpoch: 190, Loss: 0.0000, Test Acc: 1.0000\nFinal Test Accuracy: 1.0000\n","output_type":"stream"}]},{"cell_type":"code","source":"model.eval()\nwith torch.no_grad():\n    out = model(data.x, data.edge_index)\n    pred = out.argmax(dim=1)\n    correct = data.y[data.test_mask]\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T06:21:10.285984Z","iopub.execute_input":"2024-08-27T06:21:10.286428Z","iopub.status.idle":"2024-08-27T06:21:10.300874Z","shell.execute_reply.started":"2024-08-27T06:21:10.286387Z","shell.execute_reply":"2024-08-27T06:21:10.299491Z"},"trusted":true},"execution_count":62,"outputs":[]},{"cell_type":"code","source":"pred\ncorrect","metadata":{"execution":{"iopub.status.busy":"2024-08-27T06:21:14.597108Z","iopub.execute_input":"2024-08-27T06:21:14.597550Z","iopub.status.idle":"2024-08-27T06:21:14.608881Z","shell.execute_reply.started":"2024-08-27T06:21:14.597506Z","shell.execute_reply":"2024-08-27T06:21:14.607345Z"},"trusted":true},"execution_count":63,"outputs":[{"execution_count":63,"output_type":"execute_result","data":{"text/plain":"tensor([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n        1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0,\n        0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0,\n        0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n        1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0])"},"metadata":{}}]},{"cell_type":"code","source":"import torch\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T06:09:45.110326Z","iopub.execute_input":"2024-08-27T06:09:45.111735Z","iopub.status.idle":"2024-08-27T06:09:45.118104Z","shell.execute_reply.started":"2024-08-27T06:09:45.111677Z","shell.execute_reply":"2024-08-27T06:09:45.116574Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"def predict(new_data):\n    model.eval()\n    with torch.no_grad():\n        out = model(new_data.x, new_data.edge_index)\n        pred = out.argmax(dim=1)\n    return pred\n","metadata":{"execution":{"iopub.status.busy":"2024-08-27T06:09:53.826281Z","iopub.execute_input":"2024-08-27T06:09:53.826761Z","iopub.status.idle":"2024-08-27T06:09:53.833762Z","shell.execute_reply.started":"2024-08-27T06:09:53.826715Z","shell.execute_reply":"2024-08-27T06:09:53.832157Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport torch\nimport torch.nn.functional as F\nfrom torch_geometric.data import Data\nfrom torch_geometric.nn import GCNConv\nfrom transformers import BertTokenizer, BertModel\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import precision_recall_fscore_support, confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# Step 1: Load and preprocess the data\n#df = pd.read_csv('car_network_data.csv')\n\n# Encode categorical variables\nle_source = LabelEncoder()\nle_dest = LabelEncoder()\nle_msg_type = LabelEncoder()\nle_priority = LabelEncoder()\nle_spam = LabelEncoder()\n\ndf['Source_encoded'] = le_source.fit_transform(df['Source Vehicle'])\ndf['Dest_encoded'] = le_dest.fit_transform(df['Destination Vehicle'])\ndf['MsgType_encoded'] = le_msg_type.fit_transform(df['Message Type'])\ndf['Priority_encoded'] = le_priority.fit_transform(df['Priority'])\ndf['Spam_encoded'] = le_spam.fit_transform(df['Spam'])\n\n# Step 2: Prepare BERT tokenizer and model\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nbert_model = BertModel.from_pretrained('bert-base-uncased')\n\n# Step 3: Create graph data\nedge_index = torch.tensor([df['Source_encoded'].tolist(), df['Dest_encoded'].tolist()], dtype=torch.long)\nx = torch.tensor(df[['MsgType_encoded', 'Priority_encoded']].values, dtype=torch.float)\n\n# Process text data with BERT\nencoded_input = tokenizer(df['Message Content'].tolist(), padding=True, truncation=True, return_tensors='pt')\nwith torch.no_grad():\n    bert_output = bert_model(**encoded_input)\ntext_features = bert_output.last_hidden_state[:, 0, :]  # Use [CLS] token representation\n\n# Combine graph features and text features\nx = torch.cat([x, text_features], dim=1)\n\ny = torch.tensor(df['Spam_encoded'].values, dtype=torch.long)\n\n# Create PyTorch Geometric Data object\ndata = Data(x=x, edge_index=edge_index, y=y)\n\n# Step 4: Split the data\nnum_nodes = data.num_nodes\nnode_indices = list(range(num_nodes))\ntrain_indices, test_indices = train_test_split(node_indices, test_size=0.2, random_state=42)\n\ndata.train_mask = torch.zeros(num_nodes, dtype=torch.bool)\ndata.train_mask[train_indices] = True\ndata.test_mask = torch.zeros(num_nodes, dtype=torch.bool)\ndata.test_mask[test_indices] = True\n\n# Step 5: Define the Graph CNN model\nclass GCNModel(torch.nn.Module):\n    def __init__(self, input_dim, hidden_dim, output_dim):\n        super(GCNModel, self).__init__()\n        self.conv1 = GCNConv(input_dim, hidden_dim)\n        self.conv2 = GCNConv(hidden_dim, hidden_dim)\n        self.fc = torch.nn.Linear(hidden_dim, output_dim)\n\n    def forward(self, x, edge_index):\n        x = F.relu(self.conv1(x, edge_index))\n        x = F.relu(self.conv2(x, edge_index))\n        x = self.fc(x)\n        return F.log_softmax(x, dim=1)\n\n# Step 6: Initialize the model and optimizer\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\nmodel = GCNModel(input_dim=data.x.size(1), hidden_dim=64, output_dim=2).to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=0.01)\ndata = data.to(device)\n\n# Step 7: Training loop\ndef train():\n    model.train()\n    optimizer.zero_grad()\n    out = model(data.x, data.edge_index)\n    loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask])\n    loss.backward()\n    optimizer.step()\n    return loss.item()\n\n# Step 8: Testing\ndef test():\n    model.eval()\n    with torch.no_grad():\n        out = model(data.x, data.edge_index)\n        pred = out.argmax(dim=1)\n        train_correct = pred[data.train_mask] == data.y[data.train_mask]\n        train_acc = int(train_correct.sum()) / int(data.train_mask.sum())\n        test_correct = pred[data.test_mask] == data.y[data.test_mask]\n        test_acc = int(test_correct.sum()) / int(data.test_mask.sum())\n    return train_acc, test_acc, pred[data.test_mask], data.y[data.test_mask]\n\n# Step 9: Run the training\nfor epoch in range(200):\n    loss = train()\n    train_acc, test_acc, _, _ = test()\n    if epoch % 10 == 0:\n        print(f'Epoch: {epoch:03d}, Loss: {loss:.4f}, Train Acc: {train_acc:.4f}, Test Acc: {test_acc:.4f}')\n\n# Step 10: Final evaluation and metrics\n_, _, final_preds, final_labels = test()\nfinal_preds = final_preds.cpu().numpy()\nfinal_labels = final_labels.cpu().numpy()\n\nprecision, recall, f1, _ = precision_recall_fscore_support(final_labels, final_preds, average='binary')\nprint(f'Precision: {precision:.4f}')\nprint(f'Recall: {recall:.4f}')\nprint(f'F1 Score: {f1:.4f}')\n\n# Create confusion matrix\ncm = confusion_matrix(final_labels, final_preds)\n\n# Visualize confusion matrix\nplt.figure(figsize=(10,7))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\nplt.title('Confusion Matrix')\nplt.ylabel('True Label')\nplt.xlabel('Predicted Label')\nplt.show()\n\n# Visualize precision, recall, and F1 score\nmetrics = ['Precision', 'Recall', 'F1 Score']\nvalues = [precision, recall, f1]\n\nplt.figure(figsize=(10,7))\nsns.barplot(x=metrics, y=values)\nplt.title('Precision, Recall, and F1 Score')\nplt.ylim(0, 1)\nfor i, v in enumerate(values):\n    plt.text(i, v, f'{v:.2f}', ha='center', va='bottom')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-27T07:33:43.195507Z","iopub.execute_input":"2024-08-27T07:33:43.195965Z","iopub.status.idle":"2024-08-27T07:34:13.598825Z","shell.execute_reply.started":"2024-08-27T07:33:43.195923Z","shell.execute_reply":"2024-08-27T07:34:13.597705Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/tokenization_utils_base.py:1601: FutureWarning: `clean_up_tokenization_spaces` was not set. It will be set to `True` by default. This behavior will be depracted in transformers v4.45, and will be then set to `False` by default. For more details check this issue: https://github.com/huggingface/transformers/issues/31884\n  warnings.warn(\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\nA parameter name that contains `beta` will be renamed internally to `bias`. Please use a different name to suppress this warning.\nA parameter name that contains `gamma` will be renamed internally to `weight`. Please use a different name to suppress this warning.\n","output_type":"stream"},{"name":"stdout","text":"Epoch: 000, Loss: 0.7966, Train Acc: 0.7560, Test Acc: 0.7128\nEpoch: 010, Loss: 0.0643, Train Acc: 0.9907, Test Acc: 1.0000\nEpoch: 020, Loss: 0.0354, Train Acc: 0.9853, Test Acc: 0.9947\nEpoch: 030, Loss: 0.0194, Train Acc: 0.9907, Test Acc: 1.0000\nEpoch: 040, Loss: 0.0058, Train Acc: 0.9987, Test Acc: 1.0000\nEpoch: 050, Loss: 0.0011, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 060, Loss: 0.0002, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 070, Loss: 0.0001, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 080, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 090, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 100, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 110, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 120, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 130, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 140, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 150, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 160, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 170, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 180, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nEpoch: 190, Loss: 0.0000, Train Acc: 1.0000, Test Acc: 1.0000\nPrecision: 1.0000\nRecall: 1.0000\nF1 Score: 1.0000\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x700 with 2 Axes>","image/png":""},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/seaborn/_oldcore.py:1765: FutureWarning: unique with argument that is not not a Series, Index, ExtensionArray, or np.ndarray is deprecated and will raise in a future version.\n  order = pd.unique(vector)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x700 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}